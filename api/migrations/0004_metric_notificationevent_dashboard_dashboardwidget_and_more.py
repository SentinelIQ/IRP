# Generated by Django 5.2.1 on 2025-05-16 20:07

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0003_mitretactic_kbcategory_kbarticle_mitretechnique_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('metric_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('metric_type', models.CharField(choices=[('COUNT', 'Count'), ('AVERAGE', 'Average'), ('SUM', 'Sum'), ('PERCENTAGE', 'Percentage'), ('CUSTOM', 'Custom')], max_length=20)),
                ('entity_type', models.CharField(max_length=50)),
                ('calculation_query', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationEvent',
            fields=[
                ('event_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('event_name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('payload_schema', models.JSONField(blank=True, default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('dashboard_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_system', models.BooleanField(default=False)),
                ('layout', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_dashboards', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dashboards', to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('widget_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('widget_type', models.CharField(choices=[('LINE_CHART', 'Line Chart'), ('BAR_CHART', 'Bar Chart'), ('PIE_CHART', 'Pie Chart'), ('TABLE', 'Table'), ('KPI_CARD', 'KPI Card'), ('COUNTER', 'Counter'), ('GAUGE', 'Gauge')], max_length=20)),
                ('config', models.JSONField(default=dict)),
                ('position', models.JSONField(default=dict)),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='widgets', to='api.dashboard')),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='widgets', to='api.metric')),
            ],
        ),
        migrations.CreateModel(
            name='MetricSnapshot',
            fields=[
                ('snapshot_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('granularity', models.CharField(max_length=10)),
                ('dimensions', models.JSONField(blank=True, default=dict)),
                ('value', models.DecimalField(decimal_places=2, max_digits=15)),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='api.metric')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metric_snapshots', to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationChannel',
            fields=[
                ('channel_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('channel_type', models.CharField(choices=[('WEBHOOK', 'Webhook'), ('EMAIL', 'Email'), ('SLACK', 'Slack'), ('MATTERMOST', 'Mattermost'), ('CUSTOM_HTTP', 'Custom HTTP')], max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('configuration', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_channels', to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationRule',
            fields=[
                ('rule_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('conditions', models.JSONField(blank=True, default=dict)),
                ('message_template', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='api.notificationchannel')),
                ('event_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='api.notificationevent')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_rules', to='api.organization')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('log_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_payload', models.JSONField(default=dict)),
                ('sent_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('SUCCESS', 'Success'), ('FAILED', 'Failed'), ('PENDING', 'Pending'), ('RETRYING', 'Retrying')], default='PENDING', max_length=20)),
                ('response_details', models.TextField(blank=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('channel', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='logs', to='api.notificationchannel')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_logs', to='api.organization')),
                ('rule', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='logs', to='api.notificationrule')),
            ],
        ),
        migrations.AddIndex(
            model_name='dashboard',
            index=models.Index(fields=['organization'], name='api_dashboa_organiz_441582_idx'),
        ),
        migrations.AddIndex(
            model_name='dashboard',
            index=models.Index(fields=['is_system'], name='api_dashboa_is_syst_cc6a9b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dashboard',
            unique_together={('name', 'organization')},
        ),
        migrations.AddIndex(
            model_name='metricsnapshot',
            index=models.Index(fields=['metric', 'organization', 'date'], name='api_metrics_metric__d3bd2e_idx'),
        ),
        migrations.AddIndex(
            model_name='metricsnapshot',
            index=models.Index(fields=['date'], name='api_metrics_date_8c8a0f_idx'),
        ),
        migrations.AddIndex(
            model_name='metricsnapshot',
            index=models.Index(fields=['organization'], name='api_metrics_organiz_85e147_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationchannel',
            index=models.Index(fields=['organization'], name='api_notific_organiz_da4b9a_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationchannel',
            index=models.Index(fields=['channel_type'], name='api_notific_channel_a064cc_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationchannel',
            index=models.Index(fields=['is_active'], name='api_notific_is_acti_04d295_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationchannel',
            unique_together={('organization', 'name')},
        ),
        migrations.AddIndex(
            model_name='notificationrule',
            index=models.Index(fields=['organization'], name='api_notific_organiz_b873c3_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationrule',
            index=models.Index(fields=['event_type'], name='api_notific_event_t_85d26b_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationrule',
            index=models.Index(fields=['is_active'], name='api_notific_is_acti_7fefcf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationrule',
            unique_together={('organization', 'name')},
        ),
        migrations.AddIndex(
            model_name='notificationlog',
            index=models.Index(fields=['organization'], name='api_notific_organiz_1e0097_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationlog',
            index=models.Index(fields=['status'], name='api_notific_status_a2d8cf_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationlog',
            index=models.Index(fields=['sent_at'], name='api_notific_sent_at_4ae07d_idx'),
        ),
    ]
